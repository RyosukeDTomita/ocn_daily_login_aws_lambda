# !GetAttはテンプレート内でのARN等の属性を参照する。
# !Refはテンプレート内でのResourcesの参照に使う。
# !Subは${hoge}のようにして環境変数に指定したhogeの内容を代入する。
# DependsOnには!Refを使わない。
# CloudFomationはリソースの依存関係は!Refがついている場合には自動で解決される。
# deploy時に-tでテンプレートを指定するとlambdaに使用している外部ライブラリが登録されなくなる。指定しなければsam build時に生成されたものが使われるのでうまく行く。
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  get ocn daily point automatically (dev).
Globals:
  Function:
    Timeout: 3


Parameters:
  # 開発環境か本番環境かを切り替えるためのパラメータ
  Environment:
    Type: String
    AllowedValues:
      - development
    Default: development


# 環境変数の設定
Mappings:
  EnvironmentMap:
    development:
      S3BucketForCookie: cookie-for-iceman2


Resources:
  # Lambda用のIAMロール
  S3ReadonlyAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: for-lambda-s3-readonly-access-role
      # IAMロールがどのサービスまたはアカウントに対して信頼されるかを定義
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda Layers
  SeleniumDriverLayers:
    Type: AWS::Serverless::LayerVersion
    DeletionPolicy: Retain # スタック削除時に削除しない
    Properties:
      LayerName: selenium-driver-layers
      Description: python3 library's for lambda
      ContentUri: create_selenium_driver_layers/headless/
      CompatibleRuntimes:
        - python3.7
    Metadata:
      BuildMethod: python3.7

  # CloudFormationを使うなら，Lambdaのapp.pyのrequirements.txtがあればpythonの外部ライブラリ用のLayersの作成は不要
  # PythonLibLayers:
  #   Type: AWS::Serverless::LayerVersion
  #   #DeletionPolicy: Retain # スタック削除時に削除しない
  #   Properties:
  #     LayerName: python-lib-layers
  #     Description: python3 library's for lambda
  #     ContentUri: create_python_lib_layers/python/
  #     CompatibleRuntimes:
  #       - python3.7
  #   Metadata:
  #     BuildMethod: python3.7

  # Lambda
  PushOCNDailyPoint:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/push_ocn_daily_button/
      Handler: app.lambda_handler
      Runtime: python3.7
      Timeout: 120
      MemorySize: 3007
      Environment:
        Variables:
          BUCKET_NAME: # S3BucketForCookieはtemplate内で定義されているため使えない
            !FindInMap [EnvironmentMap, !Ref Environment, S3BucketForCookie]
      Role: !GetAtt S3ReadonlyAccessRole.Arn
      Layers:
        # - !Ref PythonLibLayers
        - !Ref SeleniumDriverLayers

  # EventBridge
  # EventBridgeを定義するにあたってSheduleExpressionとEventPatternのどちらかは必要である。
  EventLaunch:
    Type: AWS::Events::Rule
    Properties:
      Description: AWS Lambda PushOCNDailyPoint
      EventBusName: default
      ScheduleExpression: cron(2 0 * * ? *) # 00:00(UTC)を基準として1時間ごとに実行
      State: ENABLED
      Targets:
      - Id: id_push_OCNDailyPoint # テンプレート内でユニークなリソースを識別する値。
        Arn: !GetAtt PushOCNDailyPoint.Arn
        RetryPolicy:
          MaximumRetryAttempts: 1
          MaximumEventAgeInSeconds: 300

  # EventBridgeのターゲットにLambdaを指定する場合はPermissionが必要
  EventLaunchPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PushOCNDailyPoint.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventLaunch.Arn

